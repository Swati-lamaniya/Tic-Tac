{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport {\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nuseMediaQuery\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/system\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Settings = ({\n  boardSize,\n  setBoardSize,\n  gameMode,\n  setGameMode,\n  aiDifficulty,\n  setAIDifficulty,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isTimerEnabled,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setIsTimerEnabled,\n  timerDuration,\n  setTimerDuration\n}) => {\n  _s();\n  const theme = useTheme();\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [inputTimer, setInputTimer] = useState(timerDuration);\n  const handleBoardSizeChange = event => {\n    const newSize = parseInt(event.target.value, 10);\n    if (newSize >= 3 && newSize <= 8) {\n      setBoardSize(newSize);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const handleSetTimer = () => {\n    if (inputTimer >= 10 && inputTimer <= 300) {\n      setTimerDuration(inputTimer);\n    }\n  };\n  const handleGameModeChange = event => {\n    setGameMode(event.target.value);\n  };\n  const boardSizeOptions = [{\n    value: 3,\n    label: \"3 x 3\"\n  }, {\n    value: 4,\n    label: \"4 x 4 (Recommended)\"\n  }, {\n    value: 5,\n    label: \"5 x 5\"\n  }, {\n    value: 6,\n    label: \"6 x 6\"\n  }, {\n    value: 7,\n    label: \"7 x 7\"\n  }, {\n    value: 8,\n    label: \"8 x 8\"\n  }];\n  const isOnlineMode = gameMode === \"online\";\n  return (\n    /*#__PURE__*/\n    // <Box\n    //   sx={{\n    //     textAlign: \"center\",\n    //     mb: 0,\n    //     p: isSmallScreen ? 2 : 4,\n    //     display: \"flex\",\n    //     flexDirection: \"column\",\n    //     gap: 3,\n    //     alignItems: \"center\",\n    //   }}\n    // >\n    //   {/* Game Mode Settings */}\n    //   <FormControl sx={{ minWidth: 200 }}>\n    //     <InputLabel id=\"game-mode-label\" sx={{ fontFamily: \"Poppins\" }}>\n    //       Game Mode\n    //     </InputLabel>\n    //     <Select\n    //       labelId=\"game-mode-label\"\n    //       value={gameMode}\n    //       onChange={handleGameModeChange}\n    //       label=\"Game Mode\"\n    //       variant=\"outlined\"\n    //       sx={{\n    //         fontFamily: \"Poppins\",\n    //         \".MuiOutlinedInput-notchedOutline\": {\n    //           borderColor:\n    //             theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //         },\n    //         \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n    //           borderColor:\n    //             theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //         },\n    //         \".MuiSvgIcon-root\": {\n    //           color: theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //         },\n    //       }}\n    //     >\n    //       <MenuItem value=\"ai\" sx={{ fontFamily: \"Poppins\" }}>\n    //         Play Against AI\n    //       </MenuItem>\n    //       <MenuItem value=\"local\" sx={{ fontFamily: \"Poppins\" }}>\n    //         Play Locally\n    //       </MenuItem>\n    //       <MenuItem value=\"online\" sx={{ fontFamily: \"Poppins\" }}>\n    //         Play Online\n    //       </MenuItem>\n    //     </Select>\n    //   </FormControl>\n    //   {/* Board Size Settings */}\n    //   <Tooltip\n    //     title={\n    //       isOnlineMode\n    //         ? \"Board size is fixed at 4x4 in online mode.\"\n    //         : \"Choose a board size for the game.\"\n    //     }\n    //   >\n    //     <FormControl sx={{ minWidth: 200 }} disabled={isOnlineMode}>\n    //       <InputLabel id=\"board-size-label\" sx={{ fontFamily: \"Poppins\" }}>\n    //         Board Size\n    //       </InputLabel>\n    //       <Select\n    //         labelId=\"board-size-label\"\n    //         value={boardSize}\n    //         onChange={handleBoardSizeChange}\n    //         label=\"Board Size\"\n    //         variant=\"outlined\"\n    //         sx={{\n    //           fontFamily: \"Poppins\",\n    //           \".MuiOutlinedInput-notchedOutline\": {\n    //             borderColor:\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //           },\n    //           \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n    //             borderColor:\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //           },\n    //           \".MuiSvgIcon-root\": {\n    //             color: theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //           },\n    //         }}\n    //       >\n    //         {boardSizeOptions.map((option) => (\n    //           <MenuItem\n    //             key={option.value}\n    //             value={option.value}\n    //             sx={{ fontFamily: \"Poppins\" }}\n    //           >\n    //             {option.label}\n    //           </MenuItem>\n    //         ))}\n    //       </Select>\n    //     </FormControl>\n    //   </Tooltip>\n    //   {/* AI Difficulty Settings */}\n    //   {gameMode === \"ai\" && (\n    //     <FormControl sx={{ minWidth: 200 }}>\n    //       <InputLabel\n    //         id=\"ai-difficulty-label\"\n    //         sx={{\n    //           fontFamily: \"Poppins\",\n    //         }}\n    //       >\n    //         AI Difficulty\n    //       </InputLabel>\n    //       <Select\n    //         labelId=\"ai-difficulty-label\"\n    //         value={aiDifficulty}\n    //         onChange={(e) => setAIDifficulty(e.target.value as any)}\n    //         label=\"AI Difficulty\"\n    //         variant=\"outlined\"\n    //         sx={{\n    //           fontFamily: \"Poppins\",\n    //           \".MuiOutlinedInput-notchedOutline\": {\n    //             borderColor:\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //           },\n    //           \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n    //             borderColor:\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //           },\n    //           \".MuiSvgIcon-root\": {\n    //             color: theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\n    //           },\n    //         }}\n    //       >\n    //         <MenuItem value=\"easy\" sx={{ fontFamily: \"Poppins\" }}>\n    //           Easy\n    //         </MenuItem>\n    //         <MenuItem value=\"medium\" sx={{ fontFamily: \"Poppins\" }}>\n    //           Medium\n    //         </MenuItem>\n    //         <MenuItem value=\"hard\" sx={{ fontFamily: \"Poppins\" }}>\n    //           Hard\n    //         </MenuItem>\n    //         <MenuItem value=\"impossible\" sx={{ fontFamily: \"Poppins\" }}>\n    //           Impossible\n    //         </MenuItem>\n    //       </Select>\n    //     </FormControl>\n    //   )}\n    //   {/* Timer Settings */}\n    //   <Box\n    //     sx={{\n    //       display: \"flex\",\n    //       flexDirection: isSmallScreen ? \"column\" : \"row\",\n    //       alignItems: \"center\",\n    //       gap: 2,\n    //     }}\n    //   >\n    //     {/*<Tooltip*/}\n    //     {/*  title={*/}\n    //     {/*    isOnlineMode*/}\n    //     {/*      ? \"Timer is disabled in online mode.\"*/}\n    //     {/*      : \"Enable or disable the timer for the game.\"*/}\n    //     {/*  }*/}\n    //     {/*>*/}\n    //     {/*  <Box*/}\n    //     {/*    sx={{*/}\n    //     {/*      display: \"flex\",*/}\n    //     {/*      alignItems: \"center\",*/}\n    //     {/*      gap: 1,*/}\n    //     {/*      opacity: isOnlineMode ? 0.5 : 1,*/}\n    //     {/*    }}*/}\n    //     {/*  >*/}\n    //     {/*    <Typography variant=\"body1\" sx={{ fontFamily: \"Poppins\" }}>*/}\n    //     {/*      Enable Timer*/}\n    //     {/*    </Typography>*/}\n    //     {/*    <Switch*/}\n    //     {/*      checked={isTimerEnabled}*/}\n    //     {/*      onChange={(e) => setIsTimerEnabled(e.target.checked)}*/}\n    //     {/*      disabled={isOnlineMode}*/}\n    //     {/*    />*/}\n    //     {/*  </Box>*/}\n    //     {/*</Tooltip>*/}\n    //     {/*{isTimerEnabled && !isOnlineMode && (*/}\n    //     {/*  <Box*/}\n    //     {/*    sx={{*/}\n    //     {/*      display: \"flex\",*/}\n    //     {/*      flexDirection: isSmallScreen ? \"column\" : \"row\",*/}\n    //     {/*      gap: 2,*/}\n    //     {/*      alignItems: \"center\",*/}\n    //     {/*    }}*/}\n    //     {/*  >*/}\n    //     {/*    <TextField*/}\n    //     {/*      label=\"Timer (seconds)\"*/}\n    //     {/*      type=\"number\"*/}\n    //     {/*      value={inputTimer}*/}\n    //     {/*      onChange={(e) => setInputTimer(Number(e.target.value))}*/}\n    //     {/*      inputProps={{*/}\n    //     {/*        min: 10,*/}\n    //     {/*        max: 300,*/}\n    //     {/*        style: {*/}\n    //     {/*          fontFamily: \"Poppins, sans-serif\",*/}\n    //     {/*        },*/}\n    //     {/*      }}*/}\n    //     {/*      InputLabelProps={{*/}\n    //     {/*        style: {*/}\n    //     {/*          fontFamily: \"Poppins, sans-serif\",*/}\n    //     {/*        },*/}\n    //     {/*      }}*/}\n    //     {/*      sx={{*/}\n    //     {/*        fontFamily: \"Poppins\",*/}\n    //     {/*        width: isSmallScreen ? \"100%\" : 200,*/}\n    //     {/*      }}*/}\n    //     {/*    />*/}\n    //     {/*    <Button*/}\n    //     {/*      variant=\"contained\"*/}\n    //     {/*      color=\"primary\"*/}\n    //     {/*      onClick={handleSetTimer}*/}\n    //     {/*      sx={{ fontFamily: \"Poppins\" }}*/}\n    //     {/*    >*/}\n    //     {/*      Set Timer*/}\n    //     {/*    </Button>*/}\n    //     {/*  </Box>*/}\n    //     {/*)}*/}\n    //   </Box>\n    // </Box>\n    _jsxDEV(_Fragment, {}, void 0, false)\n  );\n};\n_s(Settings, \"HHYxpyRBLPv4Ej54YPMpyuG4D7A=\", false, function () {\n  return [useTheme, useMediaQuery];\n});\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","useMediaQuery","useTheme","Fragment","_Fragment","jsxDEV","_jsxDEV","Settings","boardSize","setBoardSize","gameMode","setGameMode","aiDifficulty","setAIDifficulty","isTimerEnabled","setIsTimerEnabled","timerDuration","setTimerDuration","_s","theme","isSmallScreen","breakpoints","down","inputTimer","setInputTimer","handleBoardSizeChange","event","newSize","parseInt","target","value","handleSetTimer","handleGameModeChange","boardSizeOptions","label","isOnlineMode","_c","$RefreshReg$"],"sources":["E:/sql-node/Tic-Tac-Toe-Fullstack-Game/frontend/src/components/Settings.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  TextField,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Typography,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Button,\r\n  useMediaQuery,\r\n  Tooltip,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  Switch,\r\n} from \"@mui/material\";\r\nimport { SelectChangeEvent } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/system\";\r\n\r\ninterface SettingsProps {\r\n  boardSize: number;\r\n  setBoardSize: (size: number) => void;\r\n  gameMode: \"ai\" | \"local\" | \"online\";\r\n  setGameMode: (mode: \"ai\" | \"local\" | \"online\") => void;\r\n  aiDifficulty: \"easy\" | \"medium\" | \"hard\" | \"impossible\";\r\n  setAIDifficulty: (\r\n    difficulty: \"easy\" | \"medium\" | \"hard\" | \"impossible\",\r\n  ) => void;\r\n  isTimerEnabled: boolean;\r\n  setIsTimerEnabled: (enabled: boolean) => void;\r\n  timerDuration: number;\r\n  setTimerDuration: (duration: number) => void;\r\n}\r\n\r\nconst Settings: React.FC<SettingsProps> = ({\r\n  boardSize,\r\n  setBoardSize,\r\n  gameMode,\r\n  setGameMode,\r\n  aiDifficulty,\r\n  setAIDifficulty,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  isTimerEnabled,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  setIsTimerEnabled,\r\n  timerDuration,\r\n  setTimerDuration,\r\n}) => {\r\n  const theme = useTheme();\r\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const [inputTimer, setInputTimer] = useState(timerDuration);\r\n\r\n  const handleBoardSizeChange = (event: SelectChangeEvent<number>) => {\r\n    const newSize = parseInt(event.target.value as unknown as string, 10);\r\n    if (newSize >= 3 && newSize <= 8) {\r\n      setBoardSize(newSize);\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  const handleSetTimer = () => {\r\n    if (inputTimer >= 10 && inputTimer <= 300) {\r\n      setTimerDuration(inputTimer);\r\n    }\r\n  };\r\n\r\n  const handleGameModeChange = (\r\n    event: SelectChangeEvent<\"ai\" | \"local\" | \"online\">,\r\n  ) => {\r\n    setGameMode(event.target.value as \"ai\" | \"local\" | \"online\");\r\n  };\r\n\r\n  const boardSizeOptions = [\r\n    { value: 3, label: \"3 x 3\" },\r\n    { value: 4, label: \"4 x 4 (Recommended)\" },\r\n    { value: 5, label: \"5 x 5\" },\r\n    { value: 6, label: \"6 x 6\" },\r\n    { value: 7, label: \"7 x 7\" },\r\n    { value: 8, label: \"8 x 8\" },\r\n  ];\r\n\r\n  const isOnlineMode = gameMode === \"online\";\r\n\r\n  return (\r\n    // <Box\r\n    //   sx={{\r\n    //     textAlign: \"center\",\r\n    //     mb: 0,\r\n    //     p: isSmallScreen ? 2 : 4,\r\n    //     display: \"flex\",\r\n    //     flexDirection: \"column\",\r\n    //     gap: 3,\r\n    //     alignItems: \"center\",\r\n    //   }}\r\n    // >\r\n    //   {/* Game Mode Settings */}\r\n    //   <FormControl sx={{ minWidth: 200 }}>\r\n    //     <InputLabel id=\"game-mode-label\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //       Game Mode\r\n    //     </InputLabel>\r\n    //     <Select\r\n    //       labelId=\"game-mode-label\"\r\n    //       value={gameMode}\r\n    //       onChange={handleGameModeChange}\r\n    //       label=\"Game Mode\"\r\n    //       variant=\"outlined\"\r\n    //       sx={{\r\n    //         fontFamily: \"Poppins\",\r\n    //         \".MuiOutlinedInput-notchedOutline\": {\r\n    //           borderColor:\r\n    //             theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //         },\r\n    //         \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n    //           borderColor:\r\n    //             theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //         },\r\n    //         \".MuiSvgIcon-root\": {\r\n    //           color: theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //         },\r\n    //       }}\r\n    //     >\r\n    //       <MenuItem value=\"ai\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //         Play Against AI\r\n    //       </MenuItem>\r\n    //       <MenuItem value=\"local\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //         Play Locally\r\n    //       </MenuItem>\r\n    //       <MenuItem value=\"online\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //         Play Online\r\n    //       </MenuItem>\r\n    //     </Select>\r\n    //   </FormControl>\r\n\r\n    //   {/* Board Size Settings */}\r\n    //   <Tooltip\r\n    //     title={\r\n    //       isOnlineMode\r\n    //         ? \"Board size is fixed at 4x4 in online mode.\"\r\n    //         : \"Choose a board size for the game.\"\r\n    //     }\r\n    //   >\r\n    //     <FormControl sx={{ minWidth: 200 }} disabled={isOnlineMode}>\r\n    //       <InputLabel id=\"board-size-label\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //         Board Size\r\n    //       </InputLabel>\r\n    //       <Select\r\n    //         labelId=\"board-size-label\"\r\n    //         value={boardSize}\r\n    //         onChange={handleBoardSizeChange}\r\n    //         label=\"Board Size\"\r\n    //         variant=\"outlined\"\r\n    //         sx={{\r\n    //           fontFamily: \"Poppins\",\r\n    //           \".MuiOutlinedInput-notchedOutline\": {\r\n    //             borderColor:\r\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //           },\r\n    //           \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n    //             borderColor:\r\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //           },\r\n    //           \".MuiSvgIcon-root\": {\r\n    //             color: theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //           },\r\n    //         }}\r\n    //       >\r\n    //         {boardSizeOptions.map((option) => (\r\n    //           <MenuItem\r\n    //             key={option.value}\r\n    //             value={option.value}\r\n    //             sx={{ fontFamily: \"Poppins\" }}\r\n    //           >\r\n    //             {option.label}\r\n    //           </MenuItem>\r\n    //         ))}\r\n    //       </Select>\r\n    //     </FormControl>\r\n    //   </Tooltip>\r\n\r\n    //   {/* AI Difficulty Settings */}\r\n    //   {gameMode === \"ai\" && (\r\n    //     <FormControl sx={{ minWidth: 200 }}>\r\n    //       <InputLabel\r\n    //         id=\"ai-difficulty-label\"\r\n    //         sx={{\r\n    //           fontFamily: \"Poppins\",\r\n    //         }}\r\n    //       >\r\n    //         AI Difficulty\r\n    //       </InputLabel>\r\n    //       <Select\r\n    //         labelId=\"ai-difficulty-label\"\r\n    //         value={aiDifficulty}\r\n    //         onChange={(e) => setAIDifficulty(e.target.value as any)}\r\n    //         label=\"AI Difficulty\"\r\n    //         variant=\"outlined\"\r\n    //         sx={{\r\n    //           fontFamily: \"Poppins\",\r\n    //           \".MuiOutlinedInput-notchedOutline\": {\r\n    //             borderColor:\r\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //           },\r\n    //           \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n    //             borderColor:\r\n    //               theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //           },\r\n    //           \".MuiSvgIcon-root\": {\r\n    //             color: theme.palette.mode === \"dark\" ? \"#ffffff\" : \"#000000\",\r\n    //           },\r\n    //         }}\r\n    //       >\r\n    //         <MenuItem value=\"easy\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //           Easy\r\n    //         </MenuItem>\r\n    //         <MenuItem value=\"medium\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //           Medium\r\n    //         </MenuItem>\r\n    //         <MenuItem value=\"hard\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //           Hard\r\n    //         </MenuItem>\r\n    //         <MenuItem value=\"impossible\" sx={{ fontFamily: \"Poppins\" }}>\r\n    //           Impossible\r\n    //         </MenuItem>\r\n    //       </Select>\r\n    //     </FormControl>\r\n    //   )}\r\n\r\n    //   {/* Timer Settings */}\r\n    //   <Box\r\n    //     sx={{\r\n    //       display: \"flex\",\r\n    //       flexDirection: isSmallScreen ? \"column\" : \"row\",\r\n    //       alignItems: \"center\",\r\n    //       gap: 2,\r\n    //     }}\r\n    //   >\r\n    //     {/*<Tooltip*/}\r\n    //     {/*  title={*/}\r\n    //     {/*    isOnlineMode*/}\r\n    //     {/*      ? \"Timer is disabled in online mode.\"*/}\r\n    //     {/*      : \"Enable or disable the timer for the game.\"*/}\r\n    //     {/*  }*/}\r\n    //     {/*>*/}\r\n    //     {/*  <Box*/}\r\n    //     {/*    sx={{*/}\r\n    //     {/*      display: \"flex\",*/}\r\n    //     {/*      alignItems: \"center\",*/}\r\n    //     {/*      gap: 1,*/}\r\n    //     {/*      opacity: isOnlineMode ? 0.5 : 1,*/}\r\n    //     {/*    }}*/}\r\n    //     {/*  >*/}\r\n    //     {/*    <Typography variant=\"body1\" sx={{ fontFamily: \"Poppins\" }}>*/}\r\n    //     {/*      Enable Timer*/}\r\n    //     {/*    </Typography>*/}\r\n    //     {/*    <Switch*/}\r\n    //     {/*      checked={isTimerEnabled}*/}\r\n    //     {/*      onChange={(e) => setIsTimerEnabled(e.target.checked)}*/}\r\n    //     {/*      disabled={isOnlineMode}*/}\r\n    //     {/*    />*/}\r\n    //     {/*  </Box>*/}\r\n    //     {/*</Tooltip>*/}\r\n    //     {/*{isTimerEnabled && !isOnlineMode && (*/}\r\n    //     {/*  <Box*/}\r\n    //     {/*    sx={{*/}\r\n    //     {/*      display: \"flex\",*/}\r\n    //     {/*      flexDirection: isSmallScreen ? \"column\" : \"row\",*/}\r\n    //     {/*      gap: 2,*/}\r\n    //     {/*      alignItems: \"center\",*/}\r\n    //     {/*    }}*/}\r\n    //     {/*  >*/}\r\n    //     {/*    <TextField*/}\r\n    //     {/*      label=\"Timer (seconds)\"*/}\r\n    //     {/*      type=\"number\"*/}\r\n    //     {/*      value={inputTimer}*/}\r\n    //     {/*      onChange={(e) => setInputTimer(Number(e.target.value))}*/}\r\n    //     {/*      inputProps={{*/}\r\n    //     {/*        min: 10,*/}\r\n    //     {/*        max: 300,*/}\r\n    //     {/*        style: {*/}\r\n    //     {/*          fontFamily: \"Poppins, sans-serif\",*/}\r\n    //     {/*        },*/}\r\n    //     {/*      }}*/}\r\n    //     {/*      InputLabelProps={{*/}\r\n    //     {/*        style: {*/}\r\n    //     {/*          fontFamily: \"Poppins, sans-serif\",*/}\r\n    //     {/*        },*/}\r\n    //     {/*      }}*/}\r\n    //     {/*      sx={{*/}\r\n    //     {/*        fontFamily: \"Poppins\",*/}\r\n    //     {/*        width: isSmallScreen ? \"100%\" : 200,*/}\r\n    //     {/*      }}*/}\r\n    //     {/*    />*/}\r\n    //     {/*    <Button*/}\r\n    //     {/*      variant=\"contained\"*/}\r\n    //     {/*      color=\"primary\"*/}\r\n    //     {/*      onClick={handleSetTimer}*/}\r\n    //     {/*      sx={{ fontFamily: \"Poppins\" }}*/}\r\n    //     {/*    >*/}\r\n    //     {/*      Set Timer*/}\r\n    //     {/*    </Button>*/}\r\n    //     {/*  </Box>*/}\r\n    //     {/*)}*/}\r\n    //   </Box>\r\n    // </Box>\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AAME;;AAEA;;AAEA;;AAEAC;;AAEA;AAAA,OAEK,eAAe;AAEtB,SAASC,QAAQ,QAAQ,aAAa;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAiBvC,MAAMC,QAAiC,GAAGA,CAAC;EACzCC,SAAS;EACTC,YAAY;EACZC,QAAQ;EACRC,WAAW;EACXC,YAAY;EACZC,eAAe;EACf;EACAC,cAAc;EACd;EACAC,iBAAiB;EACjBC,aAAa;EACbC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,KAAK,GAAGjB,QAAQ,CAAC,CAAC;EACxB,MAAMkB,aAAa,GAAGnB,aAAa,CAACkB,KAAK,CAACE,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACjE;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAACgB,aAAa,CAAC;EAE3D,MAAMS,qBAAqB,GAAIC,KAAgC,IAAK;IAClE,MAAMC,OAAO,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,EAAuB,EAAE,CAAC;IACrE,IAAIH,OAAO,IAAI,CAAC,IAAIA,OAAO,IAAI,CAAC,EAAE;MAChClB,YAAY,CAACkB,OAAO,CAAC;IACvB;EACF,CAAC;;EAED;EACA,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIR,UAAU,IAAI,EAAE,IAAIA,UAAU,IAAI,GAAG,EAAE;MACzCN,gBAAgB,CAACM,UAAU,CAAC;IAC9B;EACF,CAAC;EAED,MAAMS,oBAAoB,GACxBN,KAAmD,IAChD;IACHf,WAAW,CAACe,KAAK,CAACG,MAAM,CAACC,KAAkC,CAAC;EAC9D,CAAC;EAED,MAAMG,gBAAgB,GAAG,CACvB;IAAEH,KAAK,EAAE,CAAC;IAAEI,KAAK,EAAE;EAAQ,CAAC,EAC5B;IAAEJ,KAAK,EAAE,CAAC;IAAEI,KAAK,EAAE;EAAsB,CAAC,EAC1C;IAAEJ,KAAK,EAAE,CAAC;IAAEI,KAAK,EAAE;EAAQ,CAAC,EAC5B;IAAEJ,KAAK,EAAE,CAAC;IAAEI,KAAK,EAAE;EAAQ,CAAC,EAC5B;IAAEJ,KAAK,EAAE,CAAC;IAAEI,KAAK,EAAE;EAAQ,CAAC,EAC5B;IAAEJ,KAAK,EAAE,CAAC;IAAEI,KAAK,EAAE;EAAQ,CAAC,CAC7B;EAED,MAAMC,YAAY,GAAGzB,QAAQ,KAAK,QAAQ;EAE1C;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAJ,OAAA,CAAAF,SAAA,mBACE;EAAC;AAEP,CAAC;AAACc,EAAA,CAlRIX,QAAiC;EAAA,QAcvBL,QAAQ,EACAD,aAAa;AAAA;AAAAmC,EAAA,GAf/B7B,QAAiC;AAoRvC,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}